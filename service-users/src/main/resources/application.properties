spring.application.name=service-users
# en caso la variable de entorno "PORT" no exista, tomara el puerto 8001 por defecto
server.port=${PORT:8001}

# "host.docker.internal" hace referencia al localhost de mi PC, lo coloco ya que se va dockerizar, y sucede en el contenedor no tengo "mysql", asi que tendre que buscarlo en mi maquina FISICA (mi PC)
# spring.datasource.url=jdbc:mysql://host.docker.internal:3306/db_docker_users?useSSL=false&serverTimezone=America/Bogota&allowPublicKeyRetrieval=false

# "db-mysql" es el nombre del contenedor que tengo de la base de datos "MySQL"
spring.datasource.url=jdbc:mysql://${DB_HOST:db-mysql:3306}/${DB_DATABASE:db_docker_users}?useSSL=false&serverTimezone=America/Bogota&allowPublicKeyRetrieval=false
# cuando modifico cualquiera cosa del proyecto "service-users" tendre que generar de nuevo el "JAR", pero esta vez omitiendo los TEST, para que no me de errores, ya que "host.docker.internal" es un host
# inexistente, el comando seria:  .\mvnw clean package -DskipTests

spring.datasource.username=${DB_USERNAME:root}
spring.datasource.password=${DB_PASSWORD:}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
spring.jpa.generate-ddl=true
logging.level.org.hibernate.SQL=debug



#saksa.service.courses.url=${SERVICE_COURSES_URL:service-courses:8002}


spring.cloud.kubernetes.discovery.enabled=true
# Esta propiedad habilita la API de Kubernetes para la gestión de secretos en la aplicación Spring. Los secretos en Kubernetes son objetos que almacenan información sensible,
# como contraseñas, tokens de acceso, claves API, etc. Al activar esta propiedad, Spring Cloud Kubernetes permite acceder a los secretos de Kubernetes a través de su API y utilizarlos
# en la aplicación de manera segura.
spring.cloud.kubernetes.secrets.enable-api=true
# Esta propiedad indica a Spring Cloud Kubernetes que descubra automáticamente los servicios registrados en todos los namespaces de Kubernetes. Por defecto, Spring Cloud Kubernetes solo
# descubre los servicios del namespace en el que se encuentra desplegada la aplicación. Al establecer esta propiedad en true, se extiende la búsqueda de servicios a todos los namespaces,
# lo que puede ser útil si se desea descubrir servicios en múltiples namespaces dentro del clúster de Kubernetes.
spring.cloud.kubernetes.discovery.all-namespaces=true



# defino el ambiente en el cual va trabajar mi proyecto, y dependiendo de ello, tomara las propiedades del "config-map.yaml"
spring.profiles.active=${MI_ENV}

# SPRING BOOT ACTUATOR: es un módulo que proporciona capacidades de monitoreo, administración y supervisión de aplicaciones basadas en Spring. Actuator ofrece una serie de endpoints (puntos finales)
# y características adicionales que permiten obtener información detallada sobre el estado y el comportamiento de una aplicación en tiempo de ejecución.

# Esta instrucción configura los endpoints de Spring Actuator que estarán expuestos a través de HTTP. Al establecer el valor como "*", se incluyen todos los endpoints disponibles para su exposición.
# Esto significa que todos los endpoints preconfigurados y personalizados de Spring Actuator estarán disponibles para acceder a través de HTTP.
management.endpoints.web.exposure.include=*
# Esta instrucción configura si se deben mostrar los detalles completos del estado de salud (health) de la aplicación en los endpoints de salud. Al establecer el valor como "always", se mostrarán
# los detalles completos en la respuesta del endpoint de salud.
management.endpoint.health.show-details=always
# Esta instrucción habilita o deshabilita el endpoint de "probes" de salud en Spring Actuator. Los "probes" son endpoints adicionales que permiten realizar verificaciones personalizadas para
# determinar el estado de salud de la aplicación. Al establecer el valor como "true", se habilita el endpoint de probes de salud.
management.endpoint.health.probes.enabled=true
# Esta instrucción habilita o deshabilita el estado de "liveness" en el endpoint de salud. El estado de "liveness" indica si la aplicación está viva y responde correctamente. Al establecer el valor
# como "true", se habilita el estado de "liveness" en el endpoint de salud.
management.health.livenessstate.enabled=true
# Esta instrucción habilita o deshabilita el estado de "readiness" en el endpoint de salud. El estado de "readiness" indica si la aplicación está lista y disponible para recibir solicitudes. Al
# establecer el valor como "true", se habilita el estado de "readiness" en el endpoint de salud.
management.health.readinessstate.enabled=true